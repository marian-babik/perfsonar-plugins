#!/bin/env python
#
# check_ps_es_srv - prints out useful stats
#
# Author: Marian Babik
# Copyright CERN 2017
#


from __future__ import print_function
import requests
import requests.exceptions
import logging
import json
import urllib
import socket
import xml.etree.ElementTree as ET

import nap.core

# suppress InsecureRequestWarning: Unverified HTTPS request is being made.
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

log = logging.getLogger("nap")

app = nap.core.Plugin(description="Reports core stats on ps deployment")
app.add_argument('-T', '--requests-timeout', dest="req_timeout", default=60, type=int,
                 help='Timeout for HTTP(s) requests')
app.add_argument('-G', '--gocdb', dest="gocdb", help='GOCDB API')
app.add_argument('-O', '--oim', dest="oim", help='OIM API')
app.add_argument('-M', '--mesh', dest="mesh", help='PWA/PSCONFIG API')


def request(url, hostcert=None, hostkey=None, verify=False):
    if hostcert and hostkey:
        req = requests.get(url, verify=verify, timeout=120, cert=(hostcert, hostkey))
    else:
        req = requests.get(url, timeout=120, verify=verify)
    req.raise_for_status()
    return req.content


def get_members(mesh_config):
    members = set()
    mesh_c = json.loads(mesh_config)
    for entry in mesh_c['tests']:
        if 'members' in entry['members'].keys():
            for h in entry['members']['members']:
                members.add(h)
        if 'a_members' in entry['members'].keys():
            for h in entry['members']['a_members']:
                members.add(h)
        if 'b_members' in entry['members'].keys():
            for h in entry['members']['b_members']:
                members.add(h)
    return members


def get_active_sonars(response):
    mesh_urls = json.loads(response)
    mk_groups = {}
    members = set()
    for entry in mesh_urls:
        url = entry['include'][0]
        if not url.startswith("https://"):
            url = "https://" + url
        mesh = url.rsplit('/', 1)[-1].upper()
        response = request(url + '/?format=meshconfig')
        hosts = get_members(response)
        mk_groups[mesh] = hosts
        for h in hosts:
            members.add(h)
    return mk_groups, members


def get_gocdb_sonars(response):
    if not response:
        return None
    tree = ET.fromstring(response)
    gocdb_set = set([(x.findtext('HOSTNAME').strip(),
                      x.findtext('SERVICE_TYPE').strip(),
                      x.findtext('IN_PRODUCTION') )
                     for x in tree.findall('SERVICE_ENDPOINT')])
    gocdb_sonars = set([(host, stype) for host, stype, state in gocdb_set
                        if (stype == 'net.perfSONAR.Bandwidth' or stype == 'net.perfSONAR.Latency')])
    return gocdb_sonars


def get_oim_sonars(response):
    if not response:
        return None
    tree = ET.fromstring(response)
    oim_resources = list()
    # first take all services defined via details/endpoint
    for r in tree.findall('ResourceGroup/Resources/Resource'):
        try:
            oim_resources.extend([(x.findtext('Details/endpoint').strip(),
                                   x.findtext('Name').strip())
                                  for x in r.findall('Services/Service')])
        except AttributeError:
            continue

    # then complement this with services with just FQDN
    res_index = set([entry[0] for entry in oim_resources])
    for x in tree.findall('ResourceGroup/Resources/Resource'):
        h = x.findtext('FQDN').strip()
        st = x.findtext('Services/Service/Name').strip()
        if h not in res_index:
            oim_resources.append((h, st))

    oim_sonars = set([(host, stype) for host, stype in oim_resources
                      if stype == 'net.perfSONAR.Bandwidth' or stype == 'net.perfSONAR.Latency'])
    return oim_sonars


def get_fqdn(host):
    try:
        socket.getaddrinfo(host, 80, 0, 0, socket.IPPROTO_TCP)
    except socket.gaierror:
        return False
    return True


@app.metric()
def test_report(args, io):
    if not args.gocdb or not args.oim:
        print("Please specify GOCDB/OIM URLs")
        io.summary = "Failed to connect to GOCDB/OIM APIs"
        io.status = nap.UNKNOWN
        return

    log.info("Retrieving GOCDB sonars ...")
    sonars = list(get_gocdb_sonars(request(args.gocdb+"&service_type=net.perfSONAR.Latency")))
    sonars_b = list(get_gocdb_sonars(request(args.gocdb+"&service_type=net.perfSONAR.Bandwidth")))
    sonars.extend(sonars_b)

    log.info("Retrieving OIM sonars ...")
    oim_sonars = list(get_oim_sonars(request(args.oim)))
    sonars.extend(oim_sonars)

    log.info("Retrieving meshes ...")
    (mesh_groups, members) = get_active_sonars(request(args.mesh))
    print('PWA/PSCONFIG registered: {}'.format(len(members)))

    sonars_set = set()
    for s in sonars:
        sonars_set.add(s[0])

    print('GOCDB/OIM registered: {}'.format(len(sonars_set)))

    non_registered = members - sonars_set
    not_in_mesh = sonars_set - members

    print("\nHosts listed in meshes, but not registered in GOCDB/OIM:")
    for n in sorted(non_registered):
        print("{}".format(n))
    print("\nHosts registered in GOCDB/OIM, but not listed in any mesh:")
    for n in sorted(not_in_mesh):
        print("{}".format(n))

    io.status = nap.OK
    io.summary = '{} active perfSONARs'.format(len(members))
    io.add_perf_data("gocdb_oim", len(sonars_set))
    io.add_perf_data("pwa", len(members))
    io.add_perf_data("non_reg", len(non_registered))
    io.add_perf_data("not_in_mesh", len(not_in_mesh))


if __name__ == '__main__':
    app.run()
