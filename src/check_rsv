#!/bin/env python
#
# check_ps_es_srv - checks RSV collector and reports basic stats
#
# Author: Marian Babik
# Copyright CERN 2017
#


from __future__ import print_function
import requests
import requests.exceptions
import logging
import json

import nap.core

log = logging.getLogger("nap")

app = nap.core.Plugin(description="Checks RSV collector and reports basic stats")
app.add_argument('-T', '--requests-timeout', dest="req_timeout", default=60, type=int,
                 help='Timeout for HTTP(s) requests')


def request(args, url):
    req_error = None
    rsv_meta = None
    try:
        rsv_meta = requests.get(url, timeout=args.req_timeout, headers={'Host': args.hostname})
        rsv_meta.raise_for_status()
    except requests.exceptions.RequestException as e:
        req_error = str(e)

    return req_error, rsv_meta


@app.metric()
def test_rsv(args, io):
    req_error, rsv = request(args, 'http://psrsv.opensciencegrid.org/rsv/index.json')

    if req_error:
        io.status = nap.CRITICAL
        io.summary = "Unable to retrieve RSV collector stats"
        return

    try:
        rsv_data = json.loads(rsv.text)
    except Exception as e:
        io.status = nap.UNKNOWN
        io.summary = "Unable to parse RSV metadata"
        io.write(str(e))
        return

    rsv_ok = 0
    rsv_critical = 0
    rsv_unknown = 0
    rsv_total = 0

    for entry in rsv_data["rows"]:
        rsv_total += 1
        if entry["status"] == "OK":
            rsv_ok += 1
        elif entry["status"] == "CRITICAL":
            rsv_critical += 1
        else:
            rsv_unknown += 1

    io.add_perf_data("total", rsv_total)
    io.add_perf_data("ok", rsv_ok)
    io.add_perf_data("critical", rsv_critical)
    io.add_perf_data("unknown", rsv_unknown)

    if args.critical is not None and rsv_critical > args.critical:
        io.summary = "%d RSV probes in CRITICAL status" % rsv_critical
        io.status = nap.CRITICAL
    else:
        io.summary = "RSV stats retrieved"
        io.status = nap.OK

    print("Total: %d" % rsv_total)
    print("OK: %d" % rsv_ok)
    print("CRITICAL: %d" % rsv_critical)
    print("UNKNOWN: %d" % rsv_unknown)

if __name__ == '__main__':
    app.run()

