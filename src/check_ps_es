#!/bin/env python
#
# check_ps_es - checks if esmond contains measurements as configured in the mesh config for given host,
#               i.e. checks freshness of results in esmond by looking at the meta-data and comparing them to the list
#               of tests/tasks defined for the host in the mesh config.
#               This is a high level functional check, which doesn't query the raw data, it relies on
#               looking up esmond metadata (thus effectively only queries postgres). It requires a working instance
#               of mesh-config interface to check what tests are supposed to be running on a given host.
#               It reports missing results per mesh (list of missing destinations for uni-directional tests or
#               list of missing sources for bi-directional tests).
#
# Author: Marian Babik
# Copyright CERN 2017
#


import requests
import requests.exceptions
import socket
import urlparse
import json
import logging

import nap.core

# suppress InsecureRequestWarning: Unverified HTTPS request is being made.
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


def get_members_for_type(entry):
    members = set()
    if 'members' in entry['members'].keys():
        for h in entry['members']['members']:
            members.add(h)
    if 'a_members' in entry['members'].keys():
        for h in entry['members']['a_members']:
            members.add(h)
    if 'b_members' in entry['members'].keys():
        for h in entry['members']['b_members']:
            members.add(h)
    return members


def has_event(entry, event):
    for ev in entry['event-types']:
        if ev['event-type'] == event:
            return True
    return False


def get_members(mesh_config, event_type):
    event_type_map = {'packet-trace': 'traceroute',
                      'packet-loss-rate': 'perfsonarbuoy/owamp',
                      'histogram-owdelay': 'perfsonarbuoy/owamp',
                      'throughput': 'perfsonarbuoy/bwctl'}
    found = False
    mesh_c = json.loads(mesh_config)
    for entry in mesh_c['tests']:
        if 'parameters' in entry.keys() and entry['parameters']['type'] == event_type_map[event_type]:
            found = True
            yield entry['description'], get_members_for_type(entry)
    if not found:
        raise Exception("Unable to get mesh members for particular event type: %s" % event_type)


log = logging.getLogger("nap")

app = nap.core.Plugin(description="Checks metadata in esmond wrt. tests configured in the mesh config")
app.add_argument('--hostcert', help='Path to hostcert.pem')
app.add_argument('--hostkey', help='Path to hostkey.pem')
app.add_argument('-T', '--requests-timeout', dest="req_timeout", default=60, type=int,
                 help='Timeout for HTTP(s) requests')
app.add_argument('-e', '--events', help='Comma separated list of events to query')
app.add_argument('-r', '--timerange', default=7200, type=int, help='Time interval for esmond query')
app.add_argument('-R', '--reverse', action='store_true', default=False, help='Check reverse direction')
app.add_argument('-M', '--host-autourl', help="Mesh config auto-URL", dest="autourl")
app.add_argument('--esmond', help='Specify explicit esmond location (to be used instead of hostname/esmond)')


@app.metric()
def test_esmond_meta(args, io):
    if not (args.hostname or args.hostcert or args.hostkey or args.events):
        io.status = nap.UNKNOWN
        io.summary = "Missing plugin arguments"
        return

    if not args.autourl:
        io.status = nap.UNKNOWN
        io.summary = "Missing auto-url argument"
        return

    # build URL
    host = socket.gethostbyname(args.hostname)  # force IPv4
    if args.esmond:
        url = args.esmond + '/esmond/perfsonar/archive/?format=json&input-source=' + args.hostname + \
             '&time-range=' + str(args.timerange)
    else:
        url = host + '/esmond/perfsonar/archive/?format=json&input-source=' + args.hostname + \
             '&time-range=' + str(args.timerange)
    if args.reverse:
        url = host + '/esmond/perfsonar/archive/?format=json&destination=' + args.hostname + \
              '&time-range=' + str(args.timerange)
    if args.esmond:
        url = url + '&measurement-agent=' + args.hostname

    for event in args.events.split(','):
        url = url + '&event-type=' + event

    # http request
    log.debug(url)
    req_error = None
    try:
        esmond_meta = requests.get("http://"+url, timeout=args.req_timeout, headers={'Host': args.hostname})
        esmond_meta.raise_for_status()
    except requests.exceptions.RequestException as e:
        req_error = str(e)

    if req_error:  # https request as fallback
        try:
            esmond_meta = requests.get("https://"+url, timeout=args.req_timeout, headers={'Host': args.hostname},
                                    verify=False)
            esmond_meta.raise_for_status()
        except requests.exceptions.RequestException as e:
            req_error = str(e)
        else:
            req_error = None

    if req_error:
        io.status = nap.CRITICAL
        io.summary = "Connection failed (%s)" % req_error
        return

    # mesh config
    mesh_url = urlparse.urljoin(args.autourl, args.hostname)
    try:
        meshes = requests.get(mesh_url+'?format=meshconfig', timeout=args.req_timeout)
        meshes.raise_for_status()
    except requests.exceptions.RequestException as e:
        io.status = nap.UNKNOWN
        io.summary = "Failed to get mesh from %s" % mesh_url
        return

    try:
        esmond_metadata = json.loads(esmond_meta.text)
    except Exception as e:
        io.status = nap.UNKNOWN
        io.summary = "Unable to parse esmond metadata"
        return

    # lookup missing events
    missing = {}
    found = set()
    missing_entries = False
    for event in args.events.split(','):
        for mesh, ev_mem in dict(get_members(meshes.text, event)).iteritems():
            if not ev_mem:
                io.status = nap.UNKNOWN
                io.summary = "No members for particular mesh %s and event type: %s" % (mesh, event)
                return
            # remove localhost
            if args.hostname in ev_mem:
                ev_mem.remove(args.hostname)
            # find missing entries
            mem_to_check = ev_mem.copy()
            for member in ev_mem:
                for entry in esmond_metadata:
                    # direct tests
                    if (not args.reverse) and entry['input-destination'] == member and has_event(entry, event)\
                                                  and member in mem_to_check:
                        if 'IPv4' in mesh and ':' not in entry['destination']:
                            mem_to_check.remove(member)
                        elif 'IPv6' in mesh:
                            if ':' in entry['destination']:   # host found
                                mem_to_check.remove(member)
                            else:                             # host missing but not dual-stacked
                                host_addr = socket.getaddrinfo(member, 80, 0, 0, socket.IPPROTO_TCP)
                                if not filter(lambda x: x[0] == socket.AF_INET6, host_addr):
                                    mem_to_check.remove(member)
                        elif 'IPv4' not in mesh and 'IPv6' not in mesh:
                            mem_to_check.remove(member)
                    # reverse tests
                    if args.reverse and entry['input-source'] == member and has_event(entry, event)\
                            and member in mem_to_check:
                        if 'IPv4' in mesh and ':' not in entry['source']:
                            mem_to_check.remove(member)
                        elif 'IPv6' in mesh and ':' in entry['source']:
                            mem_to_check.remove(member)
                        elif 'IPv4' not in mesh and 'IPv6' not in mesh:
                            mem_to_check.remove(member)
            if mem_to_check:
                missing[mesh + ' (' + event + ')'] = mem_to_check
                missing_entries = True
                found.update(ev_mem - mem_to_check)
            else:
                found.update(ev_mem)

    # found missing events -> warning
    if missing_entries:
        missing_count = set()
        for v in missing.itervalues():
            missing_count.update(v)
        comp_rate = round(
                    float(len(found)) / (len(found) + len(missing_count)),
                    4) * 100
        events = args.events.split(',')
        if 'packet-trace' in events and comp_rate >= 90:
            io.status = nap.OK
        elif 'throughput' in events and comp_rate >= 70:
            io.status = nap.OK
        elif 'histogram-owdelay' in events and comp_rate >= 80:
            io.status = nap.OK
        else:
            io.status = nap.WARNING
        if comp_rate <= 20:
            io.status = nap.CRITICAL
        io.summary = "esmond {} % complete for event type: {}".format(comp_rate, args.events)
        io.add_perf_data("complete", comp_rate, uom="%")
        io.add_perf_data("total", len(found) + len(missing_count - found))
        io.add_perf_data("mcount", len(missing_count))
        io.add_perf_data("wcount", len(found))

        print "Time-range: %d" % args.timerange
        print "Even-types checked: %s" % args.events
        for k, v in sorted(missing.iteritems()):
            if not args.reverse:
                print "\nMesh (Event-type): %s " % str(k)
                print "   Missing destinations: %s" % len(v)
                print "   Missing destinations: %s" % (", ".join(v))
            else:
                print "\nMesh (Event-type): %s " % str(k)
                print "   Missing sources: %s" % len(v)
                print "   Missing sources: %s" % (", ".join(v))
        if not args.reverse:
            print "\n   Working destinations: %s" % (", ".join(list(found)))
        else:
            print "\n   Working sources: %s" % (", ".join(list(found)))
        print "\nDocumentation for this check can be found at https://opensciencegrid.org/networking/perfsonar/faq/"
        return

    # no missing events - all ok
    io.status = nap.OK
    io.summary = "esmond is complete"
    io.add_perf_data("complete", 100, uom="%")
    io.add_perf_data("total", len(found))
    io.add_perf_data("mcount", 0)
    io.add_perf_data("wcount", len(found))
    if not args.reverse:
        print "   Working destinations: %s" % (", ".join(list(found)))
    else:
        print "   Working sources: %s" % (", ".join(list(found)))


if __name__ == '__main__':
    app.run()
